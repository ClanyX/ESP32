#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>
#include <BLE2902.h>

#define SERVICE_UUID "12345678-1234-1234-1234-123456789012"
#define CHARACTERISTIC_UUID "87654321-4321-4321-4321-210987654321"

#define led 16

BLEServer *pServer = nullptr;
BLECharacteristic *pCharacteristic = nullptr;
bool deviceConnected = false;

void Blink() {
  for (int i = 0; i < 5; i++) {
    digitalWrite(led, HIGH);
    delay(300);
    digitalWrite(led, LOW);
    delay(300);
  }
}

// Callback pro p≈ôipojen√≠ a odpojen√≠
class MyServerCallbacks : public BLEServerCallbacks {
  void onConnect(BLEServer *pServer) override {
    deviceConnected = true;
    Serial.println("üì° Za≈ô√≠zen√≠ p≈ôipojeno.");
  }

  void onDisconnect(BLEServer *pServer) override {
    deviceConnected = false;
    Serial.println("‚ùå Za≈ô√≠zen√≠ odpojeno.");
    pServer->startAdvertising();  // Restart reklamy pro nov√© p≈ôipojen√≠
  }
};

// Callback pro p≈ô√≠jem dat z Androidu
class MyCharacteristicCallbacks : public BLECharacteristicCallbacks {
  void onWrite(BLECharacteristic *pCharacteristic) override {
    String value = pCharacteristic->getValue();  // Z√≠sk√°n√≠ hodnoty p≈ô√≠mo jako String

    if (!value.isEmpty()) {  // Kontrola, zda je hodnota nepr√°zdn√°
      char com = value[0];
      switch(com) {
        case '1':
          digitalWrite(led, HIGH);
          Serial.println("Led On!");
          break;
        case '2':
          Blink();
          break;
        default:
          digitalWrite(led, LOW);
          Serial.println("Led Off!");
          break;
      }
      Serial.print("üì© P≈ôijato z Androidu: ");
      Serial.println(value.c_str());  // V√Ωpis p≈ôijat√©ho textu
    }
  }
};

void setup() {
  pinMode(led, OUTPUT);
  Serial.begin(115200);
  Serial.println("üîµ Spou≈°t√≠m BLE server...");

  // Inicializace BLE
  BLEDevice::init("ESP32-S3 BLE");
  pServer = BLEDevice::createServer();
  pServer->setCallbacks(new MyServerCallbacks());

  // Vytvo≈ôen√≠ slu≈æby
  BLEService *pService = pServer->createService(SERVICE_UUID);

  // Vytvo≈ôen√≠ charakteristiky (ƒçten√≠, z√°pis, notifikace)
  pCharacteristic = pService->createCharacteristic(
    CHARACTERISTIC_UUID,
    BLECharacteristic::PROPERTY_READ | BLECharacteristic::PROPERTY_WRITE | BLECharacteristic::PROPERTY_NOTIFY);

  pCharacteristic->setCallbacks(new MyCharacteristicCallbacks());
  pCharacteristic->addDescriptor(new BLE2902());

  // Spu≈°tƒõn√≠ BLE serveru
  pService->start();
  pServer->getAdvertising()->start();

  Serial.println("‚úÖ BLE server spu≈°tƒõn, ƒçek√°m na p≈ôipojen√≠...");
}

void loop() {
}